
import xml.etree.ElementTree as ET # XML parser
import pandas as pd
import os, sys, re

def get_static_map(file):
    """Reads CSV file and return pandas dict or exit the program if some errors appear."""
    staticmap_dataframe = pd.DataFrame()
    if os.path.isfile(file):
        try:
            staticmap_dataframe = pd.read_csv(file)
        except Exception as e:
            sys.exit(f"Error reading CSV file: {file}. Exactly: {e}")
    else: #Some error caching
        sys.exit(f"No CSV static map file can be found: {file}")
    return staticmap_dataframe

def add_static_entery(xml_root, template, interface,  ip_addr, mac, hostname, entery_name,description_string = "generated by auto static generator"):
    """Add one entery to xml"""
    interface_settings_tree = xml_root.find('dhcpd').find(interface) # Get part with interface settings (DHCP/LAN/STATICMAP)
    
    # Check for valid ip and MAC using REGEX and rerurn unchanged if regex do not pass:
    if not re.match(r"\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4}\b",ip_addr):
        print("ERROR :: skipping `{ip}`, cause: ip is not valid.")
        return xml_root
    if not re.match(r"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",mac):
        print("ERROR :: skipping `{mac}`, cause: MAC addr is not valid.")
        return xml_root
    
    #template_tree = ET.parse(default_static_template_path)
    template_root = template.getroot()

    # Assing values to new template xml:

    template_root.find("ipaddr").text = ip_addr

    template_root.find("mac").text = mac

    template_root.find("cid").text = entery_name

    template_root.find("descr").text = f"{entery_name}"

    template_root.find("hostname").text = hostname

    # Add template root to config root
    interface_settings_tree.append(template_root)

    return xml_root


def add_static_map_to_file(configuration_file, static_map_file, interface = "lan"  , static_template = "DEFAULT" , output_file = "SAME_AS_INPUT"):
    """Main function to add static DHCP from configuration_file and CSV static_map_file. Enter interface name with lower case"""

    # Reading main XML config
    main_config_tree = ET.parse(configuration_file)
    main_configroot = main_config_tree.getroot()

    # Somehow define default path of template `./templates/static_template.xml`
    default_static_template_name = "staticmap.xml"
    default_static_template_path = os.path.join(  os.path.dirname(os.path.realpath(__file__)) , "templates" , default_static_template_name )
    if static_template == "DEFAULT":
        template_path = default_static_template_path
    else:
        template_path = static_template
    #static_template  = ET.parse(template_path)

    # Here we read CSV file with static map to pandas dataframe.
    # staticmap_dataframe contains cisco-like CSV with static mappings
    staticmap_dataframe = get_static_map(static_map_file)

    # We almost ready to iterate over each static and add them to main XML
    for row in staticmap_dataframe.iterrows():
            hostname = row[1][0]
            mac = row[1][1]
            ip = row[1][2]
            if ( len(row[1]) >= 4 ):
                enable = bool(row[1][3])
            # Add XML entery to interface: 
            main_configroot = add_static_entery(main_configroot, ET.parse(template_path), interface,  ip, mac, hostname, hostname)


    if output_file == "SAME_AS_INPUT":
        output_file = configuration_file
    main_config_tree.write(output_file)

